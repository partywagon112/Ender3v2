# This file provides examples of Klipper G-Code macros.  The snippets
# in this file may be copied into the main printer.cfg file and
# customized.

# See docs/Config_Reference.md for a description of parameters.

#####################################################################
#   Nozzle Cleaner
#####################################################################    
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 245
variable_start_y: 20
variable_start_z: .7
variable_wipe_dist_y: -15
variable_wipe_qty: 2
variable_wipe_spd: 500
variable_raise_distance: 18

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   #WIPE RIGHT
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z 5
 G1 Y 40

 #####################################################################
#   Nozzle Deep Cleaner
#####################################################################

[gcode_macro DEEP_CLEAN_NOZZLE]
variable_start_x: 241
variable_start_y: 18
variable_start_z: .7
variable_wipe_dist_y: -15
variable_wipe_qty: 6
variable_wipe_spd: 500
variable_raise_distance: 18

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   #WIPE RIGHT
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z 5
 G1 Y 40

[gcode_macro G29]
gcode:
  {% set t = params.T|default(0)|float %}

  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G29_state
    G90
    G1 Z10 F240
    {% if t > 30.0 %}
      M190 S{t}
    {% endif %}
    BED_MESH_CALIBRATE
    {% if 'S' in params %}
      M140 S{params.S}
    {% endif %}
    G90
    G1 Z10 F240
    G1 X150 Y155 F6000
    RESTORE_GCODE_STATE NAME=G29_state MOVE=0
  {% endif %}


[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}

  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state
  
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro UNLOAD_PLA]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    
    M104 S{EXTRUDER_TEMP}; set extruder temp
    HOME
    G90
    G1 Z20
    M109 S{EXTRUDER_TEMP} ; wait for extruder temp
    UNLOAD_FILAMENT
    M104 S0

[gcode_macro LOAD_PLA]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    M104 S{EXTRUDER_TEMP}; set extruder temp
    HOME
    G90
    G1 Z20
    M109 S{EXTRUDER_TEMP} ; wait for extruder temp
    LOAD_FILAMENT
    M104 S0

[gcode_macro HOME]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
   # {% set my_current = params.CURRENT|default(0.12)|float %} ; adjust crash current as required without fighting config.
    # {% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %} ; TODO: Find runtime current settings
    # {% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %} 
    {% set x_max = printer.toolhead.axis_maximum.x %} 
    {% set y_max = printer.toolhead.axis_maximum.y %} 
    {% set z_max = printer.toolhead.axis_maximum.z %} 
    
    G28 ; todo query for homed
    G90 ; absolute
    G0 X{x_max / 2} Y{y_max / 2} F8000 ; TODO grab feedrate from config
    G0 Z{z_max} F720 ; go to the Z-max at speed 12*60
    # SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
    G4 P200 ; Probably not necessary, it is here just for sure
    FORCE_MOVE STEPPER=stepper_z DISTANCE=10 VELOCITY=6
    G4 P200 ; 
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-4 VELOCITY=6
    G4 P200 ; same as the first one
    # SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
    G4 P200 ; same as the first one
    G28 Z

[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[force_move]
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
    command: bash -c "bash $HOME/Klipper-Backup/script.sh"
    timeout: 90.0
    verbose: True

[gcode_shell_command update_git_script_message]
    command: bash -c "bash $HOME/Klipper-Backup/script.sh -c \"$0\""
    timeout: 90.0
    verbose: True
